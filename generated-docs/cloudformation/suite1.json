{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Example configuration with S3 bucket and EC2 instance",
  "Parameters": {
    "InstanceType": {
      "Description": "EC2 reousrce instance type",
      "Type": "String",
      "Default": "t2.micro"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "demo-key"
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "Default": "0.0.0.0/0"
    }
  },
  "Mappings": {
    "AWSInstanceType2Arch": {
      "t2.micro": {
        "Arch": "64"
      }
    },
    "AWSRegionArch2AMI": {
      "ap-northeast-1": {
        "64": "ami-90815290"
      },
      "ap-southeast-1": {
        "64": "ami-0accf458"
      },
      "ap-southeast-2": {
        "64": "ami-1dc8b127"
      },
      "cn-north-1": {
        "64": "ami-eae27fd3"
      },
      "eu-central-1": {
        "64": "ami-3248712f"
      },
      "eu-west-1": {
        "64": "ami-d74437a0"
      },
      "sa-east-1": {
        "64": "ami-0f6ced12"
      },
      "us-east-1": {
        "64": "ami-83c525e8"
      },
      "us-west-1": {
        "64": "ami-61b25925"
      },
      "us-gov-west-1": {
        "64": "ami-51513172"
      },
      "us-west-2": {
        "64": "ami-57e8d767"
      }
    }
  },
  "Resources": {
    "MyBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Delete",
      "Properties": {}
    },
    "MyDefaultSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access via port 22",
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyDefaultSecurityGroup"
          }
        ],
        "SecurityGroupEgress": [],
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ]
      }
    },
    "S3AccessRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "S3AllowReadPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "S3AllowReadPolicy",
        "Roles": [
          {
            "Ref": "S3AccessRole"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:List*",
                "s3:Get*"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "MyBucket"
                    }
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:List*",
                "s3:Get*"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "MyBucket"
                    },
                    "/*"
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListAllMyBuckets"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::*"
                  ]
                ]
              }
            }
          ]
        }
      }
    },
    "S3InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "S3AccessRole"
          }
        ]
      }
    },
    "myInstance": {
      "Type": "AWS::EC2::Instance",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT8M"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {},
            "groups": {},
            "users": {},
            "sources": {},
            "files": {
              "/tmp/cfn-init.txt": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "Installed in cfn-init",
                      "\n"
                    ]
                  ]
                },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {},
            "services": {}
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "myInstance"
          }
        ],
        "SourceDestCheck": true,
        "SecurityGroupIds": [
          {
            "Ref": "MyDefaultSecurityGroup"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "S3InstanceProfile"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash\n",
                "set -x\n",
                "set -e\n",
                "set -o pipefail\n",
                "LOG=/tmp/install.log\n",
                "echo $(date): User data script started  > $LOG\n",
                "echo $(date): User data script started\n",
                "function finish() {\n",
                "    echo \"$(date): installation finished\"  \n",
                "    echo \"$(date): installation finished\"  >> $LOG \n",
                "    STACK='",
                {
                  "Ref": "AWS::StackName"
                },
                "'\n",
                "    REGION='",
                {
                  "Ref": "AWS::Region"
                },
                "'\n",
                "    RESOURCE='myInstance'\n",
                "    type cfn-signal && sudo cfn-signal --success true  --reason \"UserData script success\" --stack $STACK --resource $RESOURCE --region $REGION \n",
                "}\n",
                "function error() {\n",
                "    local lineno=$1\n",
                "    local error=1\n",
                "    echo \"$(date): installation finished in ERROR $error on line $lineno\"  \n",
                "    echo \"$(date): installation finished in ERROR $error on line $lineno\" >> $LOG \n",
                "    STACK='",
                {
                  "Ref": "AWS::StackName"
                },
                "'\n",
                "    REGION='",
                {
                  "Ref": "AWS::Region"
                },
                "'\n",
                "    RESOURCE='myInstance'\n",
                "    type cfn-signal && sudo cfn-signal --exit-code $error  --reason \"installation finished in ERROR on line $lineno\" --stack $STACK --resource $RESOURCE --region $REGION \n",
                "    exit 1\n",
                "}\n",
                "trap finish EXIT\n",
                "trap 'error ${LINENO}' ERR\n",
                "echo \"$(date): ------------------------------------------------------------------\"   \n",
                "echo Install AWS client tools   \n",
                "TMP_ZIP=awscli-bundle.zip\n",
                "curl https://s3.amazonaws.com/aws-cli/awscli-bundle.zip -o $TMP_ZIP\n",
                "sudo apt-get install unzip\n",
                "unzip $TMP_ZIP -d /tmp\n",
                "cd /tmp\n",
                "sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws  \n",
                "echo $(date): awscli installed successfully \n",
                "echo \"$(date): ------------------------------------------------------------------\"   \n",
                "echo Install Cloudformation tools   \n",
                "sudo apt-get -y install python-setuptools  \n",
                "[ -d aws-cfn-bootstrap-latest  ] || mkdir aws-cfn-bootstrap-latest  \n",
                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1  \n",
                "sudo easy_install aws-cfn-bootstrap-latest  \n"
              ]
            ]
          }
        }
      }
    },
    "myInstance2": {
      "Type": "AWS::EC2::Instance",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT6M"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {},
            "groups": {},
            "users": {},
            "sources": {},
            "files": {
              "/tmp/cfn-init.txt": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "Installed in cfn-init",
                      "\n"
                    ]
                  ]
                },
                "mode": "000444",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {},
            "services": {}
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "myInstance2"
          }
        ],
        "SourceDestCheck": true,
        "SecurityGroupIds": [
          {
            "Ref": "MyDefaultSecurityGroup"
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash\n",
                "set -x\n",
                "set -e\n",
                "set -o pipefail\n",
                "LOG=/tmp/install.log\n",
                "echo $(date): User data script started  > $LOG\n",
                "echo $(date): User data script started\n",
                "function finish() {\n",
                "    echo \"$(date): installation finished\"  \n",
                "    echo \"$(date): installation finished\"  >> $LOG \n",
                "    STACK='",
                {
                  "Ref": "AWS::StackName"
                },
                "'\n",
                "    REGION='",
                {
                  "Ref": "AWS::Region"
                },
                "'\n",
                "    RESOURCE='myInstance2'\n",
                "    type cfn-signal && sudo cfn-signal --success true  --reason \"UserData script success\" --stack $STACK --resource $RESOURCE --region $REGION \n",
                "}\n",
                "function error() {\n",
                "    local lineno=$1\n",
                "    local error=1\n",
                "    echo \"$(date): installation finished in ERROR $error on line $lineno\"  \n",
                "    echo \"$(date): installation finished in ERROR $error on line $lineno\" >> $LOG \n",
                "    STACK='",
                {
                  "Ref": "AWS::StackName"
                },
                "'\n",
                "    REGION='",
                {
                  "Ref": "AWS::Region"
                },
                "'\n",
                "    RESOURCE='myInstance2'\n",
                "    type cfn-signal && sudo cfn-signal --exit-code $error  --reason \"installation finished in ERROR on line $lineno\" --stack $STACK --resource $RESOURCE --region $REGION \n",
                "    exit 1\n",
                "}\n",
                "trap finish EXIT\n",
                "trap 'error ${LINENO}' ERR\n",
                "echo \"$(date): ------------------------------------------------------------------\"   \n",
                "echo Install AWS client tools   \n",
                "TMP_ZIP=awscli-bundle.zip\n",
                "curl https://s3.amazonaws.com/aws-cli/awscli-bundle.zip -o $TMP_ZIP\n",
                "sudo apt-get install unzip\n",
                "unzip $TMP_ZIP -d /tmp\n",
                "cd /tmp\n",
                "sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws  \n",
                "echo $(date): awscli installed successfully \n",
                "echo \"$(date): ------------------------------------------------------------------\"   \n",
                "echo Install Cloudformation tools   \n",
                "sudo apt-get -y install python-setuptools  \n",
                "[ -d aws-cfn-bootstrap-latest  ] || mkdir aws-cfn-bootstrap-latest  \n",
                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1  \n",
                "sudo easy_install aws-cfn-bootstrap-latest  \n"
              ]
            ]
          }
        }
      }
    }
  },
  "Outputs": {
    "myInstance": {
      "Description": "Ip of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "myInstance",
          "PublicIp"
        ]
      }
    },
    "myInstance2": {
      "Description": "Ip of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "myInstance2",
          "PublicIp"
        ]
      }
    },
    "Bucket": {
      "Description": "Reference to S3 bucket",
      "Value": {
        "Ref": "MyBucket"
      }
    }
  }
}
