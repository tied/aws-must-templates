
Ec2InstanceType
  instance 'myFront1'
    ec2: instanceName=myFront1
      instance_type
        should eq "t2.micro"

Ec2PrivateIp
  instance 'myFront1'
    ec2: instanceName=myFront1, private_ip_address: 10.0.0.169
      #valid cidr 10.0.0.0/24

Ec2PublicIp
  instance 'myFront1'
    Public IP
      ec2: instanceName=myFront1, public_ip_address: 52.19.164.86
        public_ip_address
          should eql "52.19.164.86"

Ec2Routes
  awsRoute:  instanceName=myFront1
    implement route {:gateway_id=>"local", :state=>"active", :destination_cidr_block=>"10.0.0.0/16"}
    implement route {:destination_cidr_block=>"0.0.0.0/0", :state=>"active", :gateway_id=>/^igw.*/}

Ec2SecurityGroups
  Security group:  instanceName=myFront1
    ingress rules
      WARNING does not validate all ingress rules in test suite
      implement ingress rule: {:ip_protocol=>"icmp", :from_port=>-1, :to_port=>-1, :ip_ranges=>[{:cidr_ip=>"0.0.0.0/0"}]}
      implement ingress rule: {:ip_protocol=>"tcp", :from_port=>22, :to_port=>22, :ip_ranges=>[{:cidr_ip=>"0.0.0.0/0"}]}
    egress rules
      WARNING does not validate all egress rules in test suite
      implement egress rule:  {:ip_protocol=>"icmp", :from_port=>-1, :to_port=>-1, :ip_ranges=>[{:cidr_ip=>"0.0.0.0/0"}]}
      implement egress rule:  {:ip_protocol=>"tcp", :from_port=>22, :to_port=>22, :ip_ranges=>[{:cidr_ip=>"10.0.1.0/24"}]}
      implement egress rule:  {:ip_protocol=>"tcp", :from_port=>443, :to_port=>443, :ip_ranges=>[{:cidr_ip=>"0.0.0.0/0"}]}

Ec2StatusNormal
  instanceName 'myFront1'
    ec2: instanceName=myFront1
      system_status_not_impaired?
        should eq true
    ec2: instanceName=myFront1
      instance_state_running?
        should eq true

NetworkCanPing
  ping  3 times to 'www.google.com', wait response within 20 seconds
    Command "ping www.google.com -W 20 -c 3"
      exit_status
        should eq 0

RespondsToPing
  ping '52.19.164.86'
    #reponds within 20 seconds with 3 test counts

ValidOSVersion
  Operating system codename 'trusty'
    Command "lsb_release --c -s"
      stdout
        should match /trusty/

Finished in 8.2 seconds (files took 2.19 seconds to load)
17 examples, 0 failures

