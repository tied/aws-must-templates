{{!


+++start+++

## <a id="resourceInstanceInitialize.mustache"></a>resourceInstanceInitialize.mustache <a class='navigator' href='#top'>[top]</a>

user-data script

**Attributes**: 

* `CreationPolicy`: in the end send cfn-signal to `../Name` -resource in current stack 
* `InitializeWait`: name of wait resource (for successfull script)
* `Initialize` : array of 
  * `InstallCFtools`: 
  * `ProvisionChef`: 
  * `InstallChef`: add UserData to install Chef
  * `InstallAwsCli`: add UserData to install awscli
  * `LaunchChefZero`: 
  * `StartCfnInit`: [Launch cfn-init](#initializeCFinit.mustache)
  * `StartCfnHup`: [launch cfn-hup helper](#initializeStartCfnHup.mustache)


+++close+++

}}

{{! +++fold-on+++ }}


{ "Fn::Base64": { "Fn::Join": [ "\n",
                  [
                    "#!/bin/bash\n"
                  , "set -x\n"
                  , "set -e\n"
                  , "set -o pipefail\n"
		  , "LOG=/tmp/install.log\n"
                  , "echo $(date): User data script started  > $LOG\n"
                  , "echo $(date): User data script started\n"
                  , "function finish() {\n"
		  ,        "    echo \"$(date): installation finished\"  \n"
		  ,        "    echo \"$(date): installation finished\"  >> $LOG \n"
                           {{# CreationPolicy}}
                  ,        "    STACK='", { "Ref" : "AWS::StackName" }, "'\n"
                  ,        "    REGION='", { "Ref" : "AWS::Region" }, "'\n"
                  ,        "    RESOURCE='{{Name}}'\n"
                  ,        "    type cfn-signal && sudo cfn-signal --success true  --reason \"UserData script success\" --stack $STACK --resource $RESOURCE --region $REGION \n"
                           {{/ CreationPolicy}}
                           {{# InitializeWait}}
                  ,        "    HANDLE='", { "Ref" : "{{InitializeWait}}" }, "'\n"
                  ,        "    type cfn-signal && sudo cfn-signal --success true  --reason \"UserData script success\" $HANDLE  \n"
                           {{/ InitializeWait}}

                  ,  "}\n" 
                  , "function error() {\n"
                  ,        "    local lineno=$1\n"
                  ,        "    local error=1\n"
		  ,        "    echo \"$(date): installation finished in ERROR $error on line $lineno\"  \n"
		  ,        "    echo \"$(date): installation finished in ERROR $error on line $lineno\" >> $LOG \n"
                           {{# CreationPolicy}}
                  ,        "    STACK='", { "Ref" : "AWS::StackName" }, "'\n"
                  ,        "    REGION='", { "Ref" : "AWS::Region" }, "'\n"
                  ,        "    RESOURCE='{{Name}}'\n"
                  ,        "    type cfn-signal && sudo cfn-signal --exit-code $error  --reason \"installation finished in ERROR on line $lineno\" --stack $STACK --resource $RESOURCE --region $REGION \n"
                           {{/ CreationPolicy}}
                           {{# InitializeWait}}
                  ,        "    HANDLE='", { "Ref" : "{{InitializeWait}}" }, "'\n"
                  ,        "    type cfn-signal && sudo cfn-signal --exit-code $error  --reason \"installation finished in ERROR on line $lineno\" $HANDLE  \n"
                           {{/ InitializeWait}}
                  ,        "    exit 1\n"
                  ,  "}\n" 
                  , "trap finish EXIT\n"
                  , "trap 'error ${LINENO}' ERR\n"

{{! NOTICE:  check for resourceInstanceMetadata.mustache   }}


                {{# Initialize}}
	            {{# InstallCFtools }}
                    ,      "echo \"$(date): ------------------------------------------------------------------\"   \n"
                    ,      "echo Install Cloudformation tools   \n"
                           {{> initializeCFtools }} 
                    {{/ InstallCFtools }}
	            {{#ProvisionChef }}
                    ,      "echo \"$(date): ------------------------------------------------------------------\"   \n"
                    ,      "echo Provision chef   \n"
                           {{> initializeProvisionChef }} 
                    {{/ ProvisionChef }}
	            {{#InstallAwsCli }}
                    ,      "echo \"$(date): ------------------------------------------------------------------\"   \n"
                    ,      "echo Install AWS client tools   \n"
                          {{> initializeInstallAwsCli }}
                    {{/ InstallAwsCli }}
	            {{#InstallChef }}
                    ,      "echo \"$(date): ------------------------------------------------------------------\"   \n"
                    ,      "echo Install chef   \n"
                           {{> initializeInstallChef }} 
                    {{/ InstallChef }}
	            {{#LaunchChefZero }}
                    ,      "echo \"$(date): ------------------------------------------------------------------\"   \n"
                    ,      "echo Lauch ChefZero   \n"
                           {{> initializeProvisionChefZero }} 
                    {{/ LaunchChefZero }}
	            {{# StartCfnInit }}
                    ,      "echo \"$(date): ------------------------------------------------------------------\"   \n"
                    ,      "echo Start cfn-init   \n"
                           {{> initializeCFinit }} 
                    {{/ StartCfnInit }}
	            {{# StartCfnHup }}
                    ,      "echo \"$(date): ------------------------------------------------------------------\"   \n"
                    ,      "echo Start cfn-hup   \n"
                           {{> initializeStartCfnHup }} 
                    {{/ StartCfnHup }}
                {{/ Initialize}}
                ]

           ]}
       } 

{{! +++fold-off+++ }}
