# 
# TEST CONFIGURATION:
#
# **test-suites.yaml** : array of 'Test Suites' 
# 
# **Test Suite**: a hash mapping  'Test Suite Name' to set of attributes:
#  - `desc`: one liner summarizing the test suite
#  - `long_desc`: (optional) multi line description of the test suite
#  - `roles`: (optional) an array of 'Test Cases' suite should pass locally
#  - `instance` (optional): an array of 'EC2 Instances'
# 
# **EC2 Instance**: hash mapping 'Instance Name' to set of attributes:
#  - roles: an array of 'Test Cases' 
#
# **Test Case**: a hash mapping name of 'Test Case Implementation' to 'Test Case Parameters'
#
# Test Case Parameter: key value pair
#  - key: name of parameter used in `Test Case Implementation`
#  - value: one of
#    - `string`: const value of the paremeter
#    - `@Outputs.<output_name>`: parameter value is taken from
#      CloudFormation stack output <output_name>
#    - `@Parameters.<param_name>`: parameter value is taken from
#      CloudFormation stack Parameter <param_name>
#
# TEST CONTEXT:
#
# **Test Suite Name**: name of the Stack test test
# 
# **Instance Name**: identify configuration in ssh/config file used
#  create SSH connection to the EC2 host, 'EC2 Instance Tests'
#
# **Test Case Implementation**: subdirectory, containing server spec
# files matching regexp '*_spec.rb'. Test runner first searches first
# local directory `spec/aws-must-templates`, and if not found, tries
# to locate Test Case Implementation in Gem `aws-must-templates`
#
#

- smoke:
   desc: Fails fast if problems with AWS installation
   long_desc: |

          Creates a S3 bucket, and no EC2 instances. 

   roles:
     - Stack
     - AwsMustTestRunnerProperties
     - ParameterTest:
          param1: value1
          param2: "@Parameters.DummyParameter"
          param3: "@Outputs.Bucket"

- suite1:
   desc: EC2 instance with S3 read access
   long_desc: |

         Creates an S3 bucket and two EC2 instances (myInstance, myInstance2)
         One of the instances (myInstance) is granted Read Access Rights to the Bucket.
  
         To grant Access Rights 

         * create a Role
         * create Policy referencing the Role
         * create an InstanceProfile referencing the Role
         * associate the InstanceProfile to the EC2 instance to grant Read Access

         Creates SecurityGroup to act as a virtual firewall, and to allow ssh
         connection to the EC2 instance.

         EC2 installation uses UserData script to install
         
         * AWS Command Line Interface
         * CloudFormation Helper Scripts. These scripts are used to create
           notification when installation is finished


   roles:
     - Stack
   instances:
     - myInstance:
         roles:
           - AwsCommandLineInterfaceInstalled:
           - CloudFormationHelperScriptsInstalled
           - ValidOSVersion:
                Codename: trusty
           - S3ReadAccessAllowed:
                Bucket: "@Outputs.Bucket"

     - myInstance2:
         roles:
           - AwsCommandLineInterfaceInstalled
           - CloudFormationHelperScriptsInstalled
           - ValidOSVersion:
                Codename: trusty
           - S3NoAccess:
              Bucket: "@Outputs.Bucket"


- suite2:

   desc: VPC with Public and Private Subnets (NAT)
   long_desc: |

         Create VPC with Public and Private Subnets (NAT)
         based on [scenario 2](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Scenario2.html)

         Resource:
         * VPC using address range 10.0.0.0/16 
         * Public subnet 10.0.0.0/24 
         * Private Subnet 10.0.1.0/24.

   roles: 

   # Just define anchor valued, does not generate anything
   suite2_data: 
        - SubNets:
             - VPC: &SubNetVPC 10.0.0.0/16
             - Public: &SubNetPublic 10.0.0.0/24
             - Private: &SubNetPrivate 10.0.1.0/24


   instances:
     - myFront1:
         roles:
             - RespondsToPing:
                 Hostname: '@Outputs.myFront1'
             - CloudFormationHelperScriptsInstalled
             - Ec2StatusNormal:
                 InstanceId: "@Outputs.InstanceId1"
             - Ec2InstanceType:
                 InstanceId: "@Outputs.InstanceId1"
                 InstanceType: "@Parameters.InstanceType"
             - Ec2PrivateIp:
                 InstanceId: "@Outputs.InstanceId1"
                 CidrBlock:   *SubNetPublic
             - Ec2PublicIp:
                 InstanceId: "@Outputs.InstanceId1"
                 PublicIp:   "@Outputs.myFront1"
                 # PublicIp:   192.168.1.1
                 # PublicIp:   defined

     - myBack1:
         roles:    
             - Ec2StatusNormal:
                 InstanceId: "@Outputs.InstanceId2"
             - Ec2PrivateIp:
                 InstanceId: "@Outputs.InstanceId2"
                 CidrBlock:   *SubNetPrivate
             - Ec2PublicIp:
                 InstanceId: "@Outputs.InstanceId2"
                 PublicIp:   "none"
                 # PublicIp:   192.168.1.1
                 # PublicIp:   defined

